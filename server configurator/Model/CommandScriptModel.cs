////////////////////////////////////////////////
// © https://github.com/badhitman 
////////////////////////////////////////////////

namespace ab.Model
{
    /// <summary>
    /// Типы команд
    /// </summary>
    public enum TypesCommands
    {
        /// <summary>
        /// Отправка низкоуровневой команды управляющему блоку в "родном формате".
        /// Т.е. пользователь укажет управляющий блок и пропишет команду в стиле: 12:0;10:1
        /// </summary>
        Controller,

        /// <summary>
        /// Юзерфрендли команда. Пользователь укажет управляющий блок, порт и новое состояние (Вкл/Выкл), которое следует назначить этому порту
        /// </summary>
        Port,

        /// <summary>
        /// Команда выхода из сценария. Либо прекращение выполнения либо указывается другой скрипт для продолжения выполнения.
        /// Либо укзывается скрипт (вцелом) либо непосредственный шаг в скрипте с которого следует начать отрабатывать этот сценарий
        /// </summary>
        Exit
    }

    public class CommandScriptModel : abstractEF
    {
        /// <summary>
        /// Тип команды
        /// </summary>
        public TypesCommands TypeCommand { get; set; }
        /// <summary>
        /// Сортировка/порядок выполенния команд в сценарии
        /// </summary>
        public int Ordering { get; set; }

        /// <summary>
        /// Родительский скрипт-владелец
        /// </summary>
        public ScriptHardwareModel ScriptHardware { get; set; }
        public int ScriptHardwareId { get; set; }

        /// <summary>
        /// Пауза перед выполнением команды. Пауза выдерживается средствами самого сервера, а не управляющего блока.
        /// Пауза выдерживается до проверки условия выполнения, т.е. не зависит от того: будет ли команда выполняться или нет
        /// </summary>
        public double PauseBeforeExecution { get; set; }
        /// <summary>
        /// Скрытая команда. Т.е. она не будет выполняться в порядке общей очереди.
        /// На такую команду можно переместиться только принудительно из другой команды.
        /// После отработки команды дальнейшая очередь будет продолжена как обычно.
        /// </summary>
        public bool Hidden { get; set; }

        /// <summary>
        /// Порт для проверки для принятия решения: выполнять команду или пропустить
        /// </summary>
        public PortHardwareModel PortExecutionCondition { get; set; }
        public int? PortExecutionConditionId { get; set; }
        /// <summary>
        /// Требуемое состояние порта для того что бы команда была выполнена.
        /// В противном случе команда будет пропущена.
        /// </summary>
        public bool? PortExecutionConditionAllowingState { get; set; }

        /// <summary>
        /// Идентификатор обслуживающей сущьности выполнения команды.
        /// В зависимости от типа команды укзывает:
        /// Controller: означает, что это идентификатор устройства. Команду выполнять управляющему блоку. Сама команда для исполнения будет извлечена из поля "ExecutionParametr".
        /// Port: означает, что это идентификатор порта некоторого устройства. Команда для исполнения (off/on) будет извлечена из поля "ExecutionParametr"
        /// Exit: означает, что текущий скрипт/сценарий прекращает своё выполнение. Дальнейшее поведение зависит от хранимого значения "Execution". Если "0" или null или string.Empty, то выход и окончание работы. Если значение десятичное и больше нуля, то это указатель на другой скрипт, который следует выполнить.
        /// </summary>
        public int Execution { get; set; }
        /// <summary>
        /// Параметр для выполнения команды.
        /// В зависимости от типа команды укзывает:
        /// Controller: [string] низкоуровневая команда для отправки управляющему блоку. Например: 10:0;8:1;12:0
        /// Port: [on/off] признак, указывающий на новое(требуемое) состояние порта
        /// Exit: [int] указание на идентификатор команды, с которой следует начать выполнять скрипт, в который передаётся дальнейшее управление
        /// </summary>
        public string ExecutionParametr { get; set; }

        public override string ToString()
        {
            string command_name = $"{Name}{(Hidden ? " [H]" : "")}{(PauseBeforeExecution > 0 ? $" [p {PauseBeforeExecution} sec]" : "")}";
#if DEBUG
            command_name = $"#{Id}; {command_name}";
#endif
            return command_name;
        }
    }
}